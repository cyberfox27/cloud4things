tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.1/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-docker-plugin/1.1/plugin.yaml

inputs:

  host_ip:
    description: > The ip of the host the application will be deployed on
    default: 127.0.0.1

  agent_user:
    description: >
        User name used when SSH-ing into the started machine
    default: ubuntu

  agent_private_key_path:
    description: >
      Path to a private key that resided on the management machine.
      SSH-ing into agent machines will be done with this key.
    default: ~/.ssh/agent_key.pem

  install_agent:
    description: >
      When running in local mode set this to false
    default: false

  epcis_port:
      description: >
        Which port you want to map the web port to.
      default: 8080

  mysql_port:
      description: >
        Which port you want to map the mysql port to.
      default: 3306

  epcis_status_port:
    description: >
      Which port for the mysql epcis status page.
    default: 28017

  epcis_container_port_bindings:
    description: >
      A dict of port bindings for the epcis container.
    default:
      8080: 8080

  mysql_container_port_bindings:
    description: >
      A dict of port bindings for the mysql container.
    default:
      27017: 27017
      28017: 28017


node_templates:

  host:
    type: cloudify.nodes.Compute
    properties:
      install_agent: { get_input: install_agent }
      ip: { get_input: host_ip }
      cloudify_agent:
        user: { get_input: agent_user }
        key: { get_input: agent_private_key_path }

  mysql_container:
    type: cloudify.docker.Container
    properties:
      name: mysql
      image:
        repository: dockerfile/mysql
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: docker.docker_plugin.tasks.create_container
          inputs:
            params:
              ports:
                - { get_input: mysql_port }
                - { get_input: epcis_status_port }
              stdin_open: true
              tty: true
              command: # Command to be executed by the database
        start:
          implementation: docker.docker_plugin.tasks.start
          inputs:
            params:
              port_bindings: { get_input: mysql_container_port_bindings }
    relationships:
      - type: cloudify.relationships.contained_in
        target: host

  tomcat_container:
    type: cloudify.docker.Container
    properties:
      name: tomcat
      image:
        repository: dockerfile/tomcat
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: docker.docker_plugin.tasks.create_container
          inputs:
            params:
        start:
          implementation: docker.docker_plugin.tasks.start
          inputs:
            params:
    relationships:


  epcis_container:
    type: cloudify.docker.Container
    properties:
      name: epcis
      image:
        repository: # EPCIS Repository
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: docker.docker_plugin.tasks.create_container
          inputs:
            params:
              ports:
                - { get_input: epcis_port }
              stdin_open: true
              tty: true
              command: # EPCIS commands
              environment:
                EPCIS_PORT: { get_input: epcis_port }
                MYSQL_PORT: { get_input: mysql_port }
                MYSQL_HOST: { get_property: [ mysql_container, name ] }
        start:
          implementation: docker.docker_plugin.tasks.start
          inputs:
            params:
              links:
                mongod: { get_property: [ epcis_container, name ] }
              port_bindings: { get_input: epcis_container_port_bindings }
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: mysql_container
